## 행렬 테두리 회전하기
## 문제 설명

## 행렬의 세로 길이(행 개수) rows, 가로 길이(열 개수) columns, 그리고 회전들의 목록 queries가 주어질 때, 
## 각 회전들을 배열에 적용한 뒤, 
## 그 회전에 의해 위치가 바뀐 숫자들 중 가장 작은 숫자들을 순서대로 배열에 담아 return 하도록 solution 함수를 완성하시오

## 입출력 예시
## 1) rows = 6, columns = 6, queries = [[2,2,5,4],[3,3,6,6],[5,1,6,3]], result = [8, 10, 25]
## 2) rows = 3, columns = 3, queries = [[1,1,2,2],[1,2,2,3],[2,1,3,2],[2,2,3,3]], result = [1, 1, 5, 3]
## 3) rows = 100, columns = 97, queries = [[1,1,100,97]], result = [1]

function solution(rows, columns, queries) {
    let answer = [];
    
    let matrix = [];
    
    for(let i = 0; i < rows; i++) {
        matrix.push(new Array(columns).fill(0))
    }
    
    let cnt = 0;
    let rowCnt = 0;
    let colCnt = 0;

    //초기화
    do {
        if(colCnt === columns) {
            rowCnt++
            colCnt = 0
        }

        matrix[rowCnt][colCnt] = cnt + 1;
        colCnt++;
        
        cnt++;
        if(cnt === rows * columns) break;

    } while(true)
    
    // 쿼리문 하나씩 꺼내서 matrix 회전 시작
    while(queries.length !== 0) {

        let head = queries.shift()

        let x1 = head[0];
        let y1 = head[1];
        let x2 = head[2];
        let y2 = head[3];

        let list = [];

        let insertNum;
        let saveNum;
        let dir = 'R'
        let newX1 = x1;
        let newY1 = y1;

        do {
            insertNum = insertNum ? saveNum : matrix[newX1-1][newY1-1];
            if(dir === 'R') newY1 = newY1 + 1;
            else if(dir === 'D') newX1 = newX1 + 1;
            else if(dir === 'L') newY1 = newY1 - 1;
            else if(dir === 'U') newX1 = newX1 - 1;

            saveNum = matrix[newX1-1][newY1-1];
            matrix[newX1-1][newY1-1] = insertNum;

            list.push(insertNum);

            if(dir === 'R' && newY1 === y2) dir = 'D'
            else if(dir === 'D' && newX1 === x2) dir = 'L'
            else if(dir === 'L' && newY1 === y1) dir = 'U'
            else if(dir === 'U' && newX1 === x1) break;
    
        } while(true)

        let minNum = Math.min(...list)
        answer.push(minNum)
    }
    
    return answer;
}
