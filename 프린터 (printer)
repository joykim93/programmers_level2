## 문제설명
## 중요도가 높은 문서를 먼저 인쇄하는 프린터
## 작동방식:
## 1) 인쇄 대기목록의 가장 앞에 있는 문서(J)를 대기목록에서 꺼낸다
## 2) 나머지 인쇄 대기목록에서 J보다 중요도가 높은 문서가 한 개라도 존재하면 J를 대기목록의 가장 마지막에 넣는다
## 3) 그렇지 않으면 J를 인쇄한다
## 예를들어, 4개의 문서 (A, B, C, D)가 순서대로 인쇄 대기목록에 있고 중요도가 (2, 1, 3, 2)라면 C, D, A, B 순으로 인쇄하게 된다.

## 문제. 현재 대기목록에 있는 문서의 중요도가 순서대로 담긴 배열 prorities와 내가 인쇄를 요청한 문서가 현재 대기목록의 어떤 위치에 있는지를 알려주는 location이 매개변수로 주어질 때,
## 내가 인쇄를 요청한 문서가 몇 번째로 인쇄되는지 return 하도록 solution 함수를 작성하시오.

## 입출력 예시
## 1) priorities = [2, 1, 3, 2], location = 2, return = 1
## 2) priorities = [1, 1, 9, 1, 1, 1], location = 0, return = 5

function solution(priorities, location) {
  let markArr = new Array(priorities.length).fill(0)
  markArr[location] = 'T'
  
  let check = ''
  let cnt = 0
  
  while(true) {
    let max = Math.max(...priorities)
    let maxIdx = priorities.indexOf(max)
    
    // 제일 큰 수가 첫번째 요소이고 그 수가 우리가 target한 요소이면
    if(maxIdx === 0 && markArr[0] === 'T') {
        cnt++
        break;
    } 
    // 제일 큰 수가 첫번째 요소이지만 그 수가 우리가 target한 요소가 아니면
    else if(maxIdx === 0) {
        cnt++
        priorities.shift()
        markArr.shift()
    } else {

        let newPriorities = priorities.slice(maxIdx)
        let newMarkArr = markArr.slice(maxIdx)

        let headPriorities = priorities.slice(0, maxIdx)
        let headMarkArr = markArr.slice(0, maxIdx)

        priorities = newPriorities.concat(headPriorities)
        markArr = newMarkArr.concat(headMarkArr)            
        }
  }
  return cnt
}
