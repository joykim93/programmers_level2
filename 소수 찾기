## 소수 찾기
## 문제 설명

## 한자리 숫자가 적힌 종이 조각이 흩어져있습니다
## 흩어진 종이 조각을 붙여 소수를 몇 개 만들 수 있는지 알아내려 합니다
## 각 종이 조각에 적힌 숫자가 적힌 문자열 numbers가 주어졌을 때, 종이 조각으로 만들 수 있는 소수가 몇 개인지 return 하도록 solution 함수를 완성하시오

## 제한사항
## 1) numbers는 길이 1 이상 7 이하인 문자열입니다
## 2) numbers는 0~9까지 숫자만으로 이루어져 있습니다
## 3) "013"은 0, 1, 3 숫자가 적힌 종이 조각이 흩어져있다는 의미입니다

## 입출력 예시
## 1) numbers = "17", return = 3
## 2) numbers = "011", return = 2

function solution(numbers) {
    
    const isPrime = (num) => {
        
        if(num <= 1) return false
        if(num === 2 || num === 3 || num === 5 || num === 7) return true
        
        let sqrt = parseInt(Math.sqrt(num))
        
        for(let i = 2; i <= sqrt; i++) {
            if(num % i === 0) return false
        }
       return true
    }
    
    const isAllVisited = (arr) => {
        for(let i = 0; i < arr.length; i++) {
            if(arr[i] === false) return false
        }
        
        return true
    }
    
    // 소수들을 담을 arr 선언
    let result = []
    // str 입력값을 한 요소단위로 쪼개어 배열로 변환
    let arr = numbers.split("")
    
    let isVisited = new Array(arr.length).fill(false)
    
    const aux = (isVisited, candi) => {
   //     debugger;
        let base = isAllVisited(isVisited)
        
        if(base) return
        
        let indexCandi = isVisited.map((el, idx) => {
            if(el === false) return idx
        }).filter((el) => el !== undefined )
        
        while(indexCandi.length > 0) {
            
            let copyIsVisited = isVisited.slice()
            
            let idx = indexCandi.shift()
            
            let head = arr[idx]
            copyIsVisited[idx] = true
            
            let newCandi = candi + head
            
            if(isPrime(Number(newCandi))) result.push(Number(newCandi))
            
            aux(copyIsVisited, newCandi)           
        }
        
    }
    
    aux(isVisited, '')
    
    // 배열내 중복된 요소 제거
    let newResult = result.filter((el, idx) => {
        return result.indexOf(el) === idx
    })

    // 배열 길이로 return
    return newResult.length
}
